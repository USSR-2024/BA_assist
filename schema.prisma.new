generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  role       Role      @default(MEMBER)
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
  aiSettings Json?
  projects   Project[] @relation("ProjectUsers")
}

model Project {
  id               Int               @id @default(autoincrement())
  title            String
  description      String?
  status           ProjectStatus     @default(ACTIVE)
  createdAt        DateTime          @default(now())
  ownerId          String
  summary          String?
  businessNeed     String?
  businessOwner    String?
  constraints      String?
  coreTeamSize     String?
  deliverables     String?
  durationBucket   String?
  framework        String?
  initialArtifacts String?
  notes            String?
  outOfScope       String?
  preferredStyle   String?
  processMaturity  String?
  riskTolerance    String?
  roadmap          Json?
  scopeAreas       String?
  sponsor          String?
  storageLinks     String?
  storageRules     String?
  successMetrics   String?
  targetDate       DateTime?
  frameworkId      String?
  chatMessages     ChatMessage[]
  files            File[]
  frameworkRef     Framework?        @relation(fields: [frameworkId], references: [id])
  projectArtifacts ProjectArtifact[]
  roadmaps         ProjectRoadmap[]
  tasks            Task[]
  users            User[]            @relation("ProjectUsers")
}

model File {
  id               Int               @id @default(autoincrement())
  projectId        Int
  name             String
  gcsPath          String
  size             Int
  status           FileStatus        @default(UPLOADED)
  text             String?
  uploadedAt       DateTime          @default(now())
  artifactId       String?
  artifactStage    ArtifactStage?
  isArtifact       Boolean?          @default(false)
  metadata         Json?
  project          Project           @relation(fields: [projectId], references: [id])
  projectArtifacts ProjectArtifact[]
}

model Task {
  id        Int        @id @default(autoincrement())
  projectId Int
  title     String
  status    TaskStatus @default(TODO)
  priority  Int
  dueDate   DateTime?
  project   Project    @relation(fields: [projectId], references: [id])
}

model ChatMessage {
  id        String   @id @default(uuid())
  projectId Int
  userId    String
  content   String
  timestamp DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
}

model GlossaryTerm {
  id         Int      @id @default(autoincrement())
  term       String   @unique
  definition String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model BusinessProcess {
  id          String            @id @default(uuid())
  title       String
  description String?
  parentId    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  parent      BusinessProcess?  @relation("ProcessHierarchy", fields: [parentId], references: [id])
  children    BusinessProcess[] @relation("ProcessHierarchy")
}

model Framework {
  id                  String           @id
  name                String
  ruName              String
  description         String
  ruDescription       String
  methodologyTag      String[]
  isDefault           Boolean          @default(false)
  isSystem            Boolean          @default(true)
  isCustom            Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  suitabilityCriteria Json?
  phases              Phase[]
  projects            Project[]
  projectRoadmaps     ProjectRoadmap[]
}

model Phase {
  id            String          @id
  frameworkId   String
  name          String
  ruName        String
  order         Int
  description   String?
  ruDescription String?
  durationWeeks Float
  tasks         FrameworkTask[]
  framework     Framework       @relation(fields: [frameworkId], references: [id])
  projectPhases ProjectPhase[]
}

model FrameworkTask {
  id                 String        @id
  frameworkId        String
  phaseId            String
  name               String
  ruName             String
  description        String
  ruDescription      String
  estimatedHours     Int?
  acceptanceCriteria String?
  isRequired         Boolean       @default(true)
  isSystem           Boolean       @default(true)
  artifactIds        String[]
  dependsOn          String[]
  phase              Phase         @relation(fields: [phaseId], references: [id])
  projectTasks       ProjectTask[]
}

model ProjectRoadmap {
  id              String         @id @default(uuid())
  projectId       Int
  frameworkId     String
  name            String?
  description     String?
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  createdByUserId String
  phases          ProjectPhase[]
  framework       Framework      @relation(fields: [frameworkId], references: [id])
  project         Project        @relation(fields: [projectId], references: [id])
}

model ProjectPhase {
  id               String         @id @default(uuid())
  projectRoadmapId String
  phaseId          String
  name             String?
  ruName           String?
  order            Int
  startDate        DateTime?
  endDate          DateTime?
  status           PhaseStatus    @default(NOT_STARTED)
  progress         Int            @default(0)
  phase            Phase          @relation(fields: [phaseId], references: [id])
  projectRoadmap   ProjectRoadmap @relation(fields: [projectRoadmapId], references: [id])
  tasks            ProjectTask[]

  @@index([projectRoadmapId])
}

model ProjectTask {
  id                 String                @id @default(uuid())
  projectPhaseId     String
  frameworkTaskId    String?
  name               String
  ruName             String?
  description        String?
  ruDescription      String?
  status             TaskStatus            @default(TODO)
  priority           Int                   @default(2)
  estimatedHours     Int?
  actualHours        Int?
  startDate          DateTime?
  dueDate            DateTime?
  assignedToUserId   String?
  acceptanceCriteria String?
  isCustom           Boolean               @default(false)
  dependsOn          String[]
  notes              String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  frameworkTask      FrameworkTask?        @relation(fields: [frameworkTaskId], references: [id])
  projectPhase       ProjectPhase          @relation(fields: [projectPhaseId], references: [id])
  artifactLinks      ProjectTaskArtifact[]

  @@index([projectPhaseId])
}

model ProjectTaskArtifact {
  id                String          @id @default(uuid())
  projectTaskId     String
  projectArtifactId String
  status            ArtifactStatus  @default(NOT_STARTED)
  isRequired        Boolean         @default(true)
  projectArtifact   ProjectArtifact @relation(fields: [projectArtifactId], references: [id])
  projectTask       ProjectTask     @relation(fields: [projectTaskId], references: [id])

  @@unique([projectTaskId, projectArtifactId])
}

model ProjectArtifact {
  id               String                @id @default(uuid())
  projectId        Int
  artifactId       String
  fileId           Int?
  status           ArtifactStatus        @default(NOT_STARTED)
  assignedToUserId String?
  version          Int                   @default(1)
  stage            ArtifactStage
  format           ArtifactFormat
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  artifact         ArtifactCatalog       @relation(fields: [artifactId], references: [id])
  file             File?                 @relation(fields: [fileId], references: [id])
  project          Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskLinks        ProjectTaskArtifact[]

  @@index([projectId])
  @@index([artifactId])
  @@index([fileId])
}

model ArtifactCatalog {
  id               String            @id @unique
  enName           String
  ruName           String
  babokArea        String
  stage            String
  description      String
  minInputs        String?
  format           String
  doneCriteria     String
  keywords         String[]
  dependsOn        String?
  providesFor      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  projectArtifacts ProjectArtifact[]
}

enum Role {
  OWNER
  MEMBER
  GUEST
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  CLOSED
  DELETED
}

enum FileStatus {
  UPLOADED
  PARSED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum ArtifactStage {
  INITIATION_DISCOVERY
  ANALYSIS_MODELING
  SOLUTION_DESIGN_PLANNING
  MONITORING_EVALUATION
}

enum ArtifactStatus {
  NOT_STARTED
  DRAFT
  IN_REVIEW
  APPROVED
  OBSOLETE
}

enum ArtifactFormat {
  DOCX
  XLSX
  PDF
  BPMN
  PNG
  OTHER
}

enum PhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}