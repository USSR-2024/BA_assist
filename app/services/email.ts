// app/services/email.ts
import nodemailer from 'nodemailer';

interface EmailParams {
  to: string | string[];
  subject: string;
  html: string;
  from?: string;
  text?: string;
  attachments?: any[];
}

class EmailService {
  private transporter: nodemailer.Transporter | null = null;
  private defaultFrom: string;
  private isConfigured: boolean;
  
  constructor() {
    this.defaultFrom = process.env.EMAIL_FROM || 'noreply@baassist.com';
    this.isConfigured = false;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const requiredParams = [
      'SMTP_HOST',
      'SMTP_PORT',
      'SMTP_USER',
      'SMTP_PASS'
    ];
    
    const missingParams = requiredParams.filter(param => !process.env[param]);
    
    if (missingParams.length > 0) {
      console.warn(`Email —Å–µ—Ä–≤–∏—Å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${missingParams.join(', ')}`);
      return;
    }
    
    try {
      this.transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST,
        port: parseInt(process.env.SMTP_PORT || '587'),
        secure: parseInt(process.env.SMTP_PORT || '587') === 465,
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS
        },
        tls: {
          rejectUnauthorized: false
        }
      });
      
      this.isConfigured = true;
      console.log('[EmailService] Email —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('[EmailService] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ email —Å–µ—Ä–≤–∏—Å–∞:', error);
    }
  }
  
  async sendEmail(params: EmailParams): Promise<boolean> {
    const { to, subject, html, from, text, attachments } = params;
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - —ç–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    // –ù–æ –µ—Å–ª–∏ EMAIL_TEST_MODE=false, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
    if (!this.isConfigured || !this.transporter || 
        (process.env.NODE_ENV === 'development' && process.env.EMAIL_TEST_MODE !== 'false')) {
      console.log('---------------------------------------------------');
      console.log('[EmailService] üîµ –≠–ú–£–õ–Ø–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò EMAIL:');
      console.log(`[EmailService] üì§ –û—Ç: ${from || this.defaultFrom}`);
      console.log(`[EmailService] üì¨ –ö–æ–º—É: ${Array.isArray(to) ? to.join(',') : to}`);
      console.log(`[EmailService] üìå –¢–µ–º–∞: ${subject}`);
      console.log('[EmailService] üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
      console.log(text || html.replace(/<[^>]*>?/gm, ''));
      console.log('---------------------------------------------------');
      return true;
    }
    
    // –†–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ production
    try {
      const mailOptions = {
        from: from || this.defaultFrom,
        to: Array.isArray(to) ? to.join(',') : to,
        subject,
        html,
        text: text || html.replace(/<[^>]*>?/gm, ''),
        attachments
      };
      
      const info = await this.transporter.sendMail(mailOptions);
      console.log('[EmailService] Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.messageId);
      return true;
    } catch (error) {
      console.error('[EmailService] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      return false;
    }
  }
  
  async sendVerificationEmail(email: string, token: string): Promise<boolean> {
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Ç–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
    const verificationUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/auth/verify?token=${token}`;
    
    return this.sendEmail({
      to: email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ | BA Assist',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h2>
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
          <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ BA Assist. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${verificationUrl}" style="background-color: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; font-weight: bold;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email</a>
          </div>
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ BA Assist, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ BA Assist</p>
        </div>
      `
    });
  }
  
  async sendPasswordResetEmail(email: string, token: string): Promise<boolean> {
    const resetUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/auth/reset-password?token=${token}`;
    
    return this.sendEmail({
      to: email,
      subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è | BA Assist',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
          <p>–í—ã (–∏–ª–∏ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π) –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ BA Assist. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetUrl}" style="background-color: #4285F4; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; font-weight: bold;">–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</a>
          </div>
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ - –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º.</p>
          <p>–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.</p>
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ BA Assist</p>
        </div>
      `
    });
  }
  
  async sendTaskNotificationEmail(email: string, taskTitle: string, projectTitle: string, taskLink: string, priority: number): Promise<boolean> {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    let priorityText = '–°—Ä–µ–¥–Ω–∏–π';
    let priorityColor = '#FFA500'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
    
    if (priority === 1) {
      priorityText = '–ù–∏–∑–∫–∏–π';
      priorityColor = '#28A745'; // –ó–µ–ª–µ–Ω—ã–π
    } else if (priority === 3) {
      priorityText = '–í—ã—Å–æ–∫–∏–π';
      priorityColor = '#DC3545'; // –ö—Ä–∞—Å–Ω—ã–π
    }
    
    return this.sendEmail({
      to: email,
      subject: `–ó–∞–¥–∞—á–∞: ${taskTitle} | –ü—Ä–æ–µ–∫—Ç: ${projectTitle}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ</h2>
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
          <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ <strong>${projectTitle}</strong>:</p>
          <div style="background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0;">${taskTitle}</h3>
            <p><strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> <span style="color: ${priorityColor};">${priorityText}</span></p>
          </div>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${taskLink}" style="background-color: #4285F4; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; font-weight: bold;">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á—É</a>
          </div>
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ BA Assist</p>
        </div>
      `
    });
  }
  
  async verifyConnection(): Promise<boolean> {
    if (!this.isConfigured || !this.transporter) {
      return false;
    }
    
    try {
      await this.transporter.verify();
      return true;
    } catch (error) {
      console.error('[EmailService] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SMTP:', error);
      return false;
    }
  }
  
  async sendTestEmail(email: string): Promise<boolean> {
    return this.sendEmail({
      to: email,
      subject: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç BA Assist',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2>–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ</h2>
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
          <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç —Å–∏—Å—Ç–µ–º—ã BA Assist. –ï—Å–ª–∏ –≤—ã –µ–≥–æ –ø–æ–ª—É—á–∏–ª–∏, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email-—Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ BA Assist</p>
        </div>
      `
    });
  }
  
  async sendProjectInvitationEmail(email: string, projectTitle: string, inviterEmail: string, invitationLink: string): Promise<boolean> {
    return this.sendEmail({
      to: email,
      subject: `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç "${projectTitle}" | BA Assist`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç</h2>
          <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</p>
          <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <strong>${inviterEmail}</strong> –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É <strong>${projectTitle}</strong> –≤ —Å–∏—Å—Ç–µ–º–µ BA Assist.</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${invitationLink}" style="background-color: #4285F4; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; font-weight: bold;">–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</a>
          </div>
          <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç.</p>
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
          <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ BA Assist</p>
        </div>
      `
    });
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const emailService = new EmailService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
export default emailService;