import { PrismaClient } from '@prisma/client';
import { seedBusinessProcesses } from './seeds/business-processes';
import { seedFrameworks } from './seeds/frameworks';

const prisma = new PrismaClient();

/**
 * Основная функция для заполнения базы данных начальными данными
 */
async function main() {
  console.log('Запуск заполнения базы данных...');
  
  try {
    // Выполняем заполнение бизнес-процессов
    await seedBusinessProcesses();
    
    // Выполняем заполнение фреймворков и фаз
    await seedFrameworks();
    
    // Здесь можно добавить вызовы других seed-функций при необходимости
    // Например, создание тестового пользователя-администратора
    await createAdminUser();
    
    console.log('Заполнение базы данных успешно завершено!');
  } catch (error) {
    console.error('Ошибка при заполнении базы данных:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Создает тестового пользователя-администратора
 */
async function createAdminUser() {
  console.log('Создание тестового администратора...');
  
  try {
    const adminExists = await prisma.user.findUnique({
      where: { email: 'admin@example.com' }
    });
    
    if (adminExists) {
      console.log('Тестовый администратор уже существует. Пропускаем создание.');
      return;
    }
    
    // Создаем пользователя (пароль: admin123)
    // В реальном приложении следует использовать bcrypt для хеширования
    const adminUser = await prisma.user.create({
      data: {
        email: 'admin@example.com',
        password: '$2b$10$JbWj.fVQBzlpwMOLeQu.XOm//rVJDmEFzB6HoVqqJJJjGmmLWUQBW', // хешированный 'admin123'
        role: 'OWNER',
        isVerified: true
      }
    });
    
    console.log('Тестовый администратор успешно создан!');
  } catch (error) {
    console.error('Ошибка при создании тестового администратора:', error);
  }
}

// Запускаем функцию заполнения
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });